
ArrayList和LinkedList区别:
    ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构.

HashMap与Hashtable的区别:
    1. 作者不同
    2. 产生时间：Hashtable一开始就有，HashMap产生于JDK1.2
    3. 继承的父类不同：HashMap是继承自AbstractMap类，而HashTable是继承自Dictionary类。
        Dictionary类是一个已经被废弃的类
    4. 对外提供的接口不同：
    5. 对Null key 和Null value的支持不同 
        Hashtable既不支持Null key也不支持Null value： 不然调用key.hashCode()会抛异常
        HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。因此，在HashMap中不能由get()方法来判断HashMap中是否存在某个键， 而应该用containsKey()方法来判断。
    6. 线程安全性不同：
        Hashtable是线程安全的，它的每个方法中都加入了Synchronize方法
        HashMap不是线程安全的，在多线程并发的环境下，可能会产生死锁等问题
    7.  初始容量大小和每次扩充容量大小的不同
        Hashtable默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。
        HashMap默认的初始化大小为16。之后每次扩充，容量变为原来的2倍.
    8. 计算hash值的方法不同:
        Hashtable直接使用对象的hashCode.
        Hashtable在计算元素的位置时需要进行一次除法运算，而除法运算是比较耗时的。HashMap为了提高计算效率，将哈希表的大小固定为了2的幂，这样在取模预算时，不需要做除法，只需要做位运算。位运算比除法的效率要高很多。

TreeMap：
    TreeMap 则是基于红黑树的一种提供顺序访问的 Map，和 HashMap 不同，它的 get、put、remove 之类操作都是 O（log(n)）的时间复杂度，具体顺序可以由指定的 Comparator 来决定，或者根据键的自然顺序来判断。

final、finally、 finalize 有什么不同？
    final： 可以用来修饰类、方法、变量，分别有不同的意义，final 修饰的 class 代表不可以继承扩展，final 的变量是不可以修改的，而 final 的方法也是不可以重写的（override）。
    finally：保证重点代码一定要被执行的一种机制
    finalize：保证对象在被垃圾收集前完成特定资源的回收。finalize 机制现在已经不推荐使用，并且在 JDK 9 开始被标记为 deprecated。

强引用、软引用、弱引用、幻象引用（虚引用）有什么区别？使用场景是什么？
    强引用 Strong Reference：
        就是我们最常见的普通对象引用，只要还有强引用指向一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象。对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 null，就是可以被垃圾收集的了，当然具体回收时机还是要看垃圾收集策略。
    软引用 SoftReference：
        是一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。软引用通常用来实现内存敏感的缓存，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。
    弱引用 WeakReference：
        并不能使对象豁免垃圾收集，仅仅是提供一种访问在弱引用状态下对象的途径。这就可以用来构建一种没有特定约束的关系，比如，维护一种非强制性的映射关系，如果试图获取时对象还在，就使用它，否则重新实例化。它同样是很多缓存实现的选择。
    幻象引用（虚引用）：
        对于幻象引用，有时候也翻译成虚引用，你不能通过它访问对象。幻象引用仅仅是提供了一种确保对象被 finalize 以后，做某些事情的机制，比如，通常用来做所谓的 Post-Mortem 清理机制，我在专栏上一讲中介绍的 Java 平台自身 Cleaner 机制等，也有人利用幻象引用监控对象的创建和销毁。

String，StringBuffer，StringBuilder区别:
    Stiring:
        它是典型的 Immutable 类，被声明成为 final class，所有属性也都是 final 的。也由于它的不可变性，类似拼接、裁剪字符串等动作，都会产生新的 String 对象。由于字符串操作的普遍性，所以相关操作的效率往往对应用性能有明显影响。
    StringBuffer:
        StringBuffer 是为解决上面提到拼接产生太多中间对象的问题而提供的一个类，我们可以用 append 或者 add 方法，把字符串添加到已有序列的末尾或者指定位置。StringBuffer 本质是一个线程安全的可修改字符序列，它保证了线程安全(它的线程安全是通过把各种修改数据的方法都加上 synchronized 关键字实现的)，也随之带来了额外的性能开销，所以除非有线程安全的需要，不然还是推荐使用它的后继者，也就是 StringBuilder。
    StringBuilder:
        StringBuilder 是 Java 1.5 中新增的，在能力上和 StringBuffer 没有本质区别，但是它去掉了线程安全的部分，有效减小了开销，是绝大部分情况下进行字符串拼接的首选。

Java反射机制：
    反射机制是 Java 语言提供的一种基础功能，赋予程序在运行时自省（introspect，官方用语）的能力。通过反射我们可以直接操作类或者对象，比如获取某个对象的类定义，获取类声明的属性和方法，调用方法或者构造对象，甚至可以运行时修改类定义。

Java动态代理：
    动态代理是一种方便运行时动态构建代理、动态处理代理方法调用的机制，很多场景都是利用类似机制做到的，比如用来包装 RPC 调用、面向切面的编程（AOP）。

    实现动态代理的方式：
         JDK 自身提供的动态代理：利用反射机制。这种实现有局限性，它是以接口为中心的。
         字节码操作机制：类似 ASM、cglib（基于 ASM）、Javassist 等

int和Integer区别：
    int：
        是 Java 的 8 个原始数据类型（Primitive Types，boolean、byte 、short、char、int、float、double、long）之一。
    Integer：
        Integer 是 int 对应的包装类，它有一个 int 类型的字段存储数据，并且提供了基本操作，比如数学运算、int 和字符串之间转换等。在 Java 5 中，引入了自动装箱和自动拆箱功能（boxing/unboxing），Java 可以根据上下文，自动进行转换，极大地简化了相关编程。
        在 Java 5 中新增了静态工厂方法 valueOf，在调用它的时候会利用一个缓存机制，带来了明显的性能改进。

Java装箱和拆箱：
    Integer i = 10;  //装箱
    int n = i;   //拆箱
    #装箱：
        Integer i = 10;     //这个过程中会自动根据数值创建对应的 Integer对象，这就是装箱
        自动将基本数据类型转换为包装器类型
    #拆箱：
        自动将包装器类型转换为基本数据类型。
    #实现：
        在装箱的时候自动调用的是Integer的valueOf(int)方法。
        而在拆箱的时候自动调用的是Integer的intValue方法。
    参考：https://www.cnblogs.com/dolphin0520/p/3780005.html

Vector，ArrayList，LinkedList区别：
    Vector：Vector 是 Java 早期提供的线程安全的动态数组。如果不需要线程安全，并不建议选择。
    ArrayList：ArrayList 是应用更加广泛的动态数组，它本身不是线程安全的，所以性能要好很多。
    LinkedList：顾名思义是 Java 提供的双向链表，所以它不需要像上面两种那样调整容量，它也不是线程安全的。

